<?php

require 'lib/model/om/BaseLocationPeer.php';


/**
 * Skeleton subclass for performing query and update operations on the 'location' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.2
 *
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class LocationPeer extends BaseLocationPeer {

/**
   * Build a tree from given list of Locations
   *
   * @param unknown_type $itemcategory_list
   * @param unknown_type $itemcategory_el
   * @return unknown
   */
  public static function buildTree( $list, $element = null, $level = 0, $upto_location_links = array() )
  {
  	$next_level      = $level + 1;
  	$tree_element    = array();

  	if ($element) {
  	  $tree_element['object']  = $element;
  	  $tree_element['level']   = $level;
      $tree_element['links']   = $element->getLocationlinksRelatedByLocationId();

      $upto_location_links = array_merge($upto_location_links, $element->getLocationlinksRelatedByUptoLocationId());

      // check if upto_locationlink shold be passed to the deeper level
      foreach ($upto_location_links as $upto_location_link_index=>$upto_location_link) {
        foreach ($tree_element['links'] as $cur_link) {
          if ($upto_location_link->getId() == $cur_link->getId()) {
              unset($upto_location_links[$upto_location_link_index]);
              break 2;
          }
        }
      }
      if (count($upto_location_links)) {
          $tree_element['links'] = array_merge($tree_element['links'], $upto_location_links);
      }
  	}

  	foreach ($list as $list_item) {

      if ($level) {
	    if ($list_item->getLocationId() == $element->getId()) {
          $children = LocationPeer::buildTree($list, $list_item, $next_level, $upto_location_links);
          if ($children) {
            $tree_element['children'][] = $children;
          }
        }
      } else {
        // first level - choose elements without parent only
        if (!$list_item->getLocationId()) {
          $element_tree = LocationPeer::buildTree($list, $list_item, $next_level, $upto_location_links);
          if ($element_tree) {
            $tree_element[] = $element_tree;
          }
        }
      }
    }

  	return $tree_element;
  }

} // LocationPeer
