<?php

require 'lib/model/om/BaseItem2itemcategoryPeer.php';


/**
 * Skeleton subclass for performing query and update operations on the 'item2itemcategory' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2
 *
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class Item2itemcategoryPeer extends BaseItem2itemcategoryPeer {
    
  /**
   * Get item categories by item type and Id
   * @param type $item_type
   * @param type $item_id
   */
  public static function getItemCategories($item_type, $item_id)
  {
    $c = new Criteria();
    $c->addJoin(Item2itemcategoryPeer::ITEMCATEGORY_ID, ItemcategoryPeer::ID);
    
    // Photos are connected to it's Photoalbum
    if ($item_type == ItemtypesPeer::ITEM_TYPE_PHOTO) {
      $c->add(Item2itemcategoryPeer::ITEM_TYPE, ItemtypesPeer::ITEM_TYPE_PHOTOALBUM);
      $c->addJoin(PhotoPeer::PHOTOALBUM_ID, Item2itemcategoryPeer::ITEM_ID);
      $c->add(PhotoPeer::ID, $item_id);
    } else {
      $c->add(Item2itemcategoryPeer::ITEM_TYPE, $item_type);
      $c->add(Item2itemcategoryPeer::ITEM_ID, $item_id);
    }

    $itemcategory_list = ItemcategoryPeer::doSelectWithI18n($c);
    
    return $itemcategory_list;
  }
  
  /**
   * Add new Item2itemcategory
   *
   * @param unknown_type $itemcategory_id
   * @param unknown_type $item_id
   * @param unknown_type $item_type
   */
  public static function add($itemcategory_id, $item_id, $item_type)
  {
  	if (!$itemcategory_id || !$item_id || !$item_type) {
  	  return false;
  	}
    $item2itemcategory = new Item2itemcategory();
    $item2itemcategory->setItemcategoryId($itemcategory_id);
    $item2itemcategory->setItemId($item_id);
    $item2itemcategory->setItemType($item_type); 
    
    try {
      $item2itemcategory->save();
    } catch(Exception $e) {}
    
    return $item2itemcategory;
  }
  
  /**
   * Update Item connections to Categories
   *
   * @param unknown_type $itemcategory_list
   * @param unknown_type $item_type
   * @param unknown_type $item_id
   * @return unknown
   */
  public static function updateItemCategories($itemcategory_id_list, $item_type, $item_id)
  {
  	// get all Item Categories
  	$itemcategory_list = self::getItemCategories($item_type, $item_id);
  	
  	// delete connections
  	foreach ($itemcategory_list as $itemcategory) {
  	  if (!in_array($itemcategory->getId(), $itemcategory_id_list)) {
  	  	$c = new Criteria();
  	  	$c->add(Item2itemcategoryPeer::ITEMCATEGORY_ID, $itemcategory->getId());
  	  	$c->add(Item2itemcategoryPeer::ITEM_ID, $item_id);
  	  	$c->add(Item2itemcategoryPeer::ITEM_TYPE, $item_type);
  	  	$item2itemcategory = Item2itemcategoryPeer::doSelectOne($c);
  	  	$item2itemcategory->delete();
  	  }
  	}
  	// add new categories
    if ($itemcategory_id_list) {
      foreach ($itemcategory_id_list as $itemcategory_id) {
      	Item2itemcategoryPeer::add($itemcategory_id, $item_id, $item_type);
      }
    }
  }
  
} // Item2itemcategoryPeer
