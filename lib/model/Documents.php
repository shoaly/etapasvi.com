<?php

require 'lib/model/om/BaseDocuments.php';


/**
 * Skeleton subclass for representing a row from the 'documents' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2
 *
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class Documents extends BaseDocuments {

	/**
	 * Initializes internal state of Documents object.
	 * @see        parent::__construct()
	 */
	public function __construct()
	{
		// Make sure that parent constructor is always invoked, since that
		// is where any default values for this object are set.
		parent::__construct();
	}
	
    /**
	 * Handle I18n DB fields in Admin Generator
	 *
	 * @param string $method
	 * @param mixed $arguments
	 * @return mixed
	 */
	public function __call($method, $arguments)
	{
	  $data = preg_split('/I18n/', $method, 2);
	
	  if( count($data) != 2 )
	  {
	    // original call for support sfPropelBehavior
	    return parent::__call($method, $arguments);
	  }
	
	  list( $method, $culture ) = $data;
	
	  if (4 == strlen($culture))
	  {
	    $culture = strtolower(substr($culture, 0, 2)) . '_' . strtoupper(substr($culture, 2, 2));
	  }
	  else
	  {
	    $culture = strtolower($culture);
	  }
	
	  $this->setCulture( $culture );
	
	  return call_user_func_array(array($this, $method), $arguments);
	}
	
	public function __toString() {
		return $this->getTitle();
	}    
	
	/**
	 * Расширенный метод для получения заголовка.
	 * Если $use_default_culture_if_empty, то возвращается значение на языке по умолчанию.
	 */	
	public function getTitle($culture = null, $use_default_culture_if_empty = false)
	{
	  $title = parent::getTitle($culture);

	  if ($use_default_culture_if_empty) {
        if (!$title) {
          $title = $this->getTitle(sfConfig::get('sf_default_culture'));
        }
	  }
      return trim($title);
	}
	
	/**
	 * Расширенный метод для получения заголовка.
	 * Если $use_default_culture_if_empty, то возвращается значение на языке по умолчанию.
	 */	
	public function getBody($culture = null, $use_default_culture_if_empty = false)
	{
	  $body = parent::getBody($culture);

	  if ($use_default_culture_if_empty) {
        if (!$body) {
          $body = $this->getBody(sfConfig::get('sf_default_culture'));
        }
	  }
      return trim($body);
	}
	
	/**
	 * Получение тела, подготовленного к выводу
	 *
	 * @return unknown
	 */
	public function getBodyPrepared($culture = null, $use_default_culture_if_empty = false) {
		return TextPeer::prepareText( $this->getBody($culture, $use_default_culture_if_empty), 1 );
	}
	
	/**
	 * Get formatted size
	 *
	 * @param unknown_type $culture
	 * @param unknown_type $use_default_culture_if_empty
	 * @return unknown
	 */
	public function getSizePrepared($culture = null, $use_default_culture_if_empty = false) {
		$size = $this->getSize($culture);
		if ($size < 1) {
			$size = number_format($size * 1024, 2) . ' KB';
		} else {
			$size = $size . ' MB';
		}
		return $size;
	}
	
	/**
	 * Get type
	 *
	 * @param unknown_type $culture
	 * @param unknown_type $use_default_culture_if_empty
	 * @return unknown
	 */
	public function getType() {
		$file = $this->getFile();
		$file_info = pathinfo($file);
		
		$type = strtoupper( $file_info['extension'] );
		
		return $type;
	}
	
	/**
	 * Получение прямого адреса файла
	 *
	 * @return unknown
	 */
	public function getDirectUrl()
	{      
	  return 'http://' . sfConfig::get('app_domain_name') . DocumentsPeer::DOCUMENTS_DIR . $this->getFile();
	}
	
    /**
     * Получение ссылки на аудиозапись
     */
	public function getUrl($culture = '') {
	    
	  if (empty($culture)){
		$culture = sfContext::getInstance()->getUser()->getCulture();
	  }	 
	  
      $url_pattern = 'documents/show?id=' . $this->getId();
	  
	  $title_translit = TextPeer::urlTranslit($this->getTitle( $culture ), $culture );
	  if (!empty($title_translit)) {
	    $url_pattern .= '&title=' . $title_translit;
	  }

	  $url = sfContext::getInstance()->getController()->genUrl($url_pattern, true, $culture);
	  return $url; 
	}	
	
	/**
	 * Заголовок для RSS
	 *
	 * @return unknown
	 */
	public function getRssTitle() {
	  $culture = sfContext::getInstance()->getUser()->getCulture();
	  $context = sfContext::getInstance();
	  $i18n    =  $context->getI18N();
	
	  return '[' . $i18n->__('Documents') . '] ' . $this->getTitle($culture, true);
	}
	
	/**
	 * Ссылка для RSS
	 *
	 * @return unknown
	 */
	public function getRssLink() {
	  return $this->getUrl();
	}
	
	/**
	 * Описание для RSS
	 *
	 * @return unknown
	 */
	public function getRssDescription() {
	  return '';
	}
	
	/**
	 * Дата публикации для RSS.
	 *
	 * @return unknown
	 */
	public function getRssPubDate() {
	  return max($this->getUpdatedAt(), $this->getUpdatedAtExtra());
	}

} // Documents
