<?php

require 'lib/model/om/BaseItemcategory.php';


/**
 * Skeleton subclass for representing a row from the 'itemcategory' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2
 *
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class Itemcategory extends BaseItemcategory {

	/**
	 * @var        Element level
	 */
	protected $level = 0;
	
	/**
	 * @var        Itemcategory
	 */
	protected $aItemcategory;
	
	/**
	 * Handle I18n DB fields in Admin Generator
	 *
	 * @param string $method
	 * @param mixed $arguments
	 * @return mixed
	 */
	public function __call($method, $arguments)
	{
	  $data = preg_split('/I18n/', $method, 2);
	
	  if( count($data) != 2 )
	  {
	    // original call for support sfPropelBehavior
	    return parent::__call($method, $arguments);
	  }
	
	  list( $method, $culture ) = $data;
	
	  if (4 == strlen($culture))
	  {
	    $culture = strtolower(substr($culture, 0, 2)) . '_' . strtoupper(substr($culture, 2, 2));
	  }
	  else
	  {
	    $culture = strtolower($culture);
	  }
	
	  $this->setCulture( $culture );
	
	  return call_user_func_array(array($this, $method), $arguments);
	}
	
	public function __toString() {
		return $this->getTitle();
	}    
	
	/**
	 * Get the associated Itemcategory object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Itemcategory The associated Itemtypes object.
	 * @throws     PropelException
	 */
	public function getItemcategory(PropelPDO $con = null)
	{
		if ($this->aItemcategory === null && ($this->itemcategory_id !== null)) {
			$this->aItemcategory = ItemcategoryPeer::retrieveByPk($this->itemcategory_id);
		}

		return $this->aItemcategory;
	}
	
	/**
	 * Расширенный метод для получения заголовка.
	 * Если $use_default_culture_if_empty, то возвращается значение на языке по умолчанию.
	 */	
	public function getTitle($culture = null, $use_default_culture_if_empty = false)
	{
	  $title = parent::getTitle($culture);

	  if ($use_default_culture_if_empty) {
        if (!$title) {
          $title = $this->getTitle(sfConfig::get('sf_default_culture'));
        }
	  }
      return trim($title);
	}
	
	/**
	 * Get element level
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Itemcategory The associated Itemtypes object.
	 * @throws     PropelException
	 */
	public function getLevel()
	{
	  return $this->level;
	}
	
	/**
	 * Set element level
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Itemcategory The associated Itemtypes object.
	 * @throws     PropelException
	 */
	public function setLevel($level)
	{
	  $this->level = (int)$level;
	}
	
    /**
     * Get URL
     */
	public function getUrl($module_action, $parameters = array(), $culture = '') 
	{
	  return ItemcategoryPeer::getUrl($module_action, $this->getCode(), $parameters = array(), $culture = '');
	}
	
} // Itemcategory
