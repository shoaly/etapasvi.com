<?php

require 'lib/model/om/BaseItemcategoryPeer.php';


/**
 * Skeleton subclass for performing query and update operations on the 'itemcategory' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2
 *
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class ItemcategoryPeer extends BaseItemcategoryPeer {
	
  // for generated documents
  const ITEMCATEGORY_NEWS = 9;
    
  /**
   * Build a tree from given list of Itemcategory elements
   *
   * @param unknown_type $itemcategory_list
   * @param unknown_type $itemcategory_el
   * @return unknown
   */
  public static function buildTree( $list, $item_type_list = array(), $element = null, $level = 0, $remove_empty_leaves = true )
  {
  	$next_level      = $level + 1;
  	$tree_element    = array();
  	
  	if ($element) {
  	  $tree_element['object']      = $element;
  	  $tree_element['level']       = $level;
  	  $element_items_count         = $element->getItemsCountByItemType($item_type_list);
  	  $tree_element['has_links']   = (bool)$element_items_count;
  	  $tree_element['items_count'] += $element_items_count;
  	}
  	
  	foreach ($list as $list_item) {
  		
      if ($level) {
      	
	    if ($list_item->getItemcategoryId() == $element->getId()) {

          $children 			      = ItemcategoryPeer::buildTree($list, $item_type_list, $list_item, $next_level);
          if ($children) {
            $tree_element['children'][] = $children;
            // if at least one children has links, this means that parent (current) element also has
            if ($children['has_links']) {
              $tree_element['has_links']   = true;
              $tree_element['items_count'] += $children['items_count'];
            }
          }
        }
        
      } else {
      	
        // first level - choose elements without parent only
        if (!$list_item->getItemcategoryId()) {
          $element_tree = ItemcategoryPeer::buildTree($list, $item_type_list, $list_item, $next_level);
          if ($element_tree) {
            $tree_element[] = $element_tree;
          }
        }
        
      }
    }
  	
    // if element has no children and it's Items Count is 0, do not add it to the tree
    if ($remove_empty_leaves && !empty($tree_element['object']) && !$tree_element['has_links'] && !$tree_element['children']) {
      $tree_element    = array();
    }

  	return $tree_element;
  }
  
  /**
   * Get conditions for indexing items
   *
   * @param unknown_type $c
   * @param unknown_type $item_type_id
   * @param unknown_type $itemcategory_id
   */
  public static function getIndexCriteria( $c, $item_type_id, $itemcategory_code )
  {
  	if (!$itemcategory_code) {
  	  return;
  	}
  	$itemcategory = self::getByCode($itemcategory_code);
  	if (empty($itemcategory)) {
  	  return;
  	}
  	$itemcategory_id = $itemcategory->getId();
  	
  	$item_peer = ItemtypesPeer::getItemTypeName($item_type_id).'Peer';
  	
  	$c->addJoin(
  	  array($item_peer::ID, Item2itemcategoryPeer::ITEM_TYPE), 
  	  array(Item2itemcategoryPeer::ITEM_ID, $item_type_id),
  	  Criteria::INNER_JOIN
  	);
  	$c->add(Item2itemcategoryPeer::ITEMCATEGORY_ID, $itemcategory_id);
  }
  
  /**
   * Get element by Code
   *
   * @param unknown_type $code
   * @return unknown
   */
  public static function getByCode( $code )
  {
  	$c = new Criteria();
  	$c->add(ItemcategoryPeer::CODE, trim($code));
  	return ItemcategoryPeer::doSelectOne($c);
  }
  
  /**
   * Generate URL
   *
   * @param unknown_type $module_action
   * @param unknown_type $code
   * @param unknown_type $parameters
   * @param unknown_type $culture
   */
  public static function getUrl($module_action, $code, $parameters = array(), $culture = '')
  {
	  if (!$module_action) {
	  	return '';
	  }
	  if (empty($culture)){
		$culture = sfContext::getInstance()->getUser()->getCulture();
	  }	 
	  
      $url_pattern = $module_action.'?itemcategory=' . $code;
	  
	  
	  foreach ($parameters as $parameter=>$value) {
	  	if ('' != $value) {
	      $url_pattern .= '&' . $parameter . '=' . $value;
	  	}
	  }

	  $url = sfContext::getInstance()->getController()->genUrl($url_pattern, true, $culture);
	  return $url;
  }
  
  /**
   * Update ITEMS_COUNT field in Itemcategory table for all Item Types, cultures and Item Categories.
   * ITEMS_COUNT is stored in JSON
   *
   * @param unknown_type $itemcategory_list
   * @param unknown_type $itemcategory_el
   * @return unknown
   */
  public static function updateItemsCount()
  {
  	$itemcategory_list = ItemcategoryPeer::doSelect(new Criteria());
  	
  	// Item Category
  	foreach ($itemcategory_list as $itemcategory) {
  		
  	  // cultures
  	  foreach (UserPeer::getCultures() as $culture) {
  	  	
  	  	// for collecting information
  	  	sfContext::getInstance()->getUser()->setCulture($culture);
  	  	// for saving
  	  	$itemcategory->setCulture($culture);
  	  	
  	  	$items_count = array();
  	  	
  	    // Item Types
  	    foreach (ItemtypesPeer::$item_type_names as $itemtype_name) {
  	    	
  	      // pass Photos
  	  	  if ($itemtype_name == ItemtypesPeer::ITEM_TYPE_NAME_PHOTO) {
  	  		continue;
  	  	  }
  	  	  
  	  	  $itemtype_id = ItemtypesPeer::getItemTypeId($itemtype_name);
  	    
  	      $item_peer      = $itemtype_name . 'Peer';
  	      $item_peer_i18n = $itemtype_name . 'I18nPeer';
  	      
  	      $c = new Criteria();
  	      
  	      $item_peer::addVisibleCriteria($c);
  	      
  	      // check if item visible criteria include I18n table
  	      $tables_columns = $c->getTablesColumns();

  	      // if there is i18n table or ALL_CULTURES field, add culture condition
  	      if (array_key_exists($item_peer_i18n::TABLE_NAME, $tables_columns) || constant("{$item_peer}::ALL_CULTURES")) {
  	        $c->addJoin(array($item_peer::ID, $item_peer_i18n::CULTURE), array($item_peer_i18n::ID, "'$culture'"), Criteria::LEFT_JOIN);	
  	      }
  	      
	  	  $c->addJoin(
	  	    array($item_peer::ID, Item2itemcategoryPeer::ITEM_TYPE), 
	  	    array(Item2itemcategoryPeer::ITEM_ID, $itemtype_id),
	  	    Criteria::INNER_JOIN
	  	  );
	  	  
	  	  $c->add(Item2itemcategoryPeer::ITEMCATEGORY_ID, $itemcategory->getId());
  	      
	  	  $items_count[$itemtype_id] = $item_peer::doCount($c);
	  	  
  	      //echo $c->toString();
  	    }
  	    //print_r( $items_count );
  	    $itemcategory->setItemsCount( json_encode($items_count) );
  	    $itemcategory->save();
  	    // save Items Count
  	  }
  	}
  	
  	return $tree_element;
  }
  
} // ItemcategoryPeer
